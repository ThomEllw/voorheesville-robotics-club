---
const navItems = [
  { href: '/', label: 'Home' },
  { href: '/about', label: 'About' },
  { href: '/blog', label: 'Blog' },
  { href: '/projects', label: 'Projects' },
  { href: '/product-review', label: 'Reviews' },
  { href: '/contact', label: 'Contact' },
  { href: '/sponsor', label: 'Sponsor' },
];

const currentPath = Astro.url.pathname;
---

<header class="sticky top-0 z-50 w-full border-b bg-white/95 backdrop-blur supports-[backdrop-filter]:bg-white/60">
  <nav class="container mx-auto flex h-16 items-center justify-between px-4">
    <!-- Logo -->
    <a href="/" class="flex items-center gap-2 text-xl font-bold text-gray-900 hover:text-blue-600 transition-colors">
      <svg class="h-8 w-8" viewBox="0 0 100 100" fill="none" xmlns="http://www.w3.org/2000/svg">
        <defs>
          <linearGradient id="logo-gradient" x1="0%" y1="0%" x2="100%" y2="100%">
            <stop offset="0%" style="stop-color:#3B82F6" />
            <stop offset="100%" style="stop-color:#1E40AF" />
          </linearGradient>
        </defs>
        <rect x="25" y="30" width="50" height="45" rx="5" fill="url(#logo-gradient)"/>
        <circle cx="40" cy="50" r="6" fill="#fff"/>
        <circle cx="60" cy="50" r="6" fill="#fff"/>
        <circle cx="40" cy="50" r="3" fill="#1E40AF"/>
        <circle cx="60" cy="50" r="3" fill="#1E40AF"/>
        <line x1="50" y1="30" x2="50" y2="20" stroke="#3B82F6" stroke-width="3" stroke-linecap="round"/>
        <circle cx="50" cy="17" r="4" fill="#EF4444"/>
        <rect x="40" y="62" width="20" height="3" rx="1.5" fill="#fff"/>
      </svg>
      <span>Voorheesville Robotics Club</span>
    </a>

    <!-- Desktop Navigation -->
    <ul class="hidden md:flex items-center gap-6">
      {navItems.map((item) => (
        <li>
          <a
            href={item.href}
            class:list={[
              'text-sm font-medium transition-colors hover:text-blue-600',
              currentPath === item.href || currentPath.startsWith(item.href + '/')
                ? 'text-blue-600'
                : 'text-gray-700',
            ]}
          >
            {item.label}
          </a>
        </li>
      ))}
    </ul>

    <!-- Mobile Menu Button -->
    <button
      id="mobile-menu-button"
      type="button"
      class="md:hidden inline-flex items-center justify-center rounded-md p-2 text-gray-700 hover:bg-gray-100 hover:text-gray-900 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-blue-600"
      aria-expanded="false"
      aria-label="Toggle menu"
    >
      <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5" />
      </svg>
    </button>
  </nav>

  <!-- Mobile Menu -->
  <div id="mobile-menu" class="hidden md:hidden border-t bg-white">
    <ul class="space-y-1 px-4 py-3">
      {navItems.map((item) => (
        <li>
          <a
            href={item.href}
            class:list={[
              'block rounded-md px-3 py-2 text-base font-medium transition-colors',
              currentPath === item.href || currentPath.startsWith(item.href + '/')
                ? 'bg-blue-50 text-blue-600'
                : 'text-gray-700 hover:bg-gray-50 hover:text-gray-900',
            ]}
          >
            {item.label}
          </a>
        </li>
      ))}
    </ul>
  </div>
</header>

<script>
  // Mobile menu toggle
  const button = document.getElementById('mobile-menu-button');
  const menu = document.getElementById('mobile-menu');

  button?.addEventListener('click', () => {
    const isExpanded = button.getAttribute('aria-expanded') === 'true';
    button.setAttribute('aria-expanded', String(!isExpanded));
    menu?.classList.toggle('hidden');
  });

  // Close mobile menu when clicking a link
  menu?.querySelectorAll('a').forEach((link) => {
    link.addEventListener('click', () => {
      button?.setAttribute('aria-expanded', 'false');
      menu?.classList.add('hidden');
    });
  });
</script>
